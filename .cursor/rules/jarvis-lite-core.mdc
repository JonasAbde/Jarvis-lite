---
description: 
globs: 
alwaysApply: true
---
Jarvis‑Lite — Core Rule
=================================
(Gælder automatisk for alle chats og Cmd + K‑forespørgsler i dette repo)

1. Formål
----------
• Hjælp AI‑agenten med at forstå Jarvis‑Lite‑arkitekturen.  
• Overhold vores kode‑ og commit‑konventioner.  
• Foreslå rettelser, tests og dokumentation, der matcher kravet om en **dansk, offline stemmeassistent**.

2. Projekt‑kontekst
-------------------
• Kildekode: `src/`  – kun Python 3.11, alt kørbart her.  
• STT: `src/audio/`  – faster‑whisper (dansk, INT8, GPU‑fallback).  
• TTS: `src/audio/`  – gTTS (dansk) med mp3‑cache.  
• NLU: `src/nlu/`    – TF‑IDF + LogReg, konfidens‑tærskel 0,55.  
• LLM: `src/llm/`    – Finetune på chcaa/gpt2‑medium‑danish.  
• Kommandoer: `src/commands/` – én Python‑funktion pr. intent.  
• Tests: `tests/` – pytest, coverage ≥ 40 %.  
• Dokumentation: `README.md` + `docs/` (Sphinx).

3. Kodestil & konventioner
--------------------------
• PEP8, type hints, dansk docstrings.  
• Brug async/await til IO‑tunge opgaver.  
• Ingen `print`; brug `logging` (level INFO).  
• Side‑effekter kun under `if __name__ == "__main__":`.  
• Én logisk ændring pr. commit → Conventional Commits‑prefix (feat:, fix:, refactor:, docs:, test: …).

4. Afhængigheder
----------------
Styr ∙ tilføj ∙ opdater altid i `requirements.txt`.  Tilføj kun nye pakker, hvis de er absolut nødvendige.

5. Fil‑tags  
-------------
• @audio   → koden under `src/audio/`  
• @nlu     → intent‑klassificering under `src/nlu/`  
• @llm     → LLM‑finetuning/inference under `src/llm/`  
• @cmd     → kommando‑funktioner under `src/commands/`  
• @tests   → pytest‑filer under `tests/`  
• @docs    → Sphinx og README‑filer.

6. Når du svarer som agent
--------------------------
1. Tal altid flydende dansk og brug tiltaleformen “du”.  
2. Vis kodeeksempler, når svaret kræver det – kort, klart, kommenteret.  
3. Er spørgsmålet uklart: stil ét konkret, opklarende spørgsmål (ingen small‑talk).  
4. Skær irrelevante detaljer fra; fokusér på løsning og næste konkrete skridt.  
5. Kør Python‑kode, shell‑/terminal‑kommandoer og `pytest` i projektmappen **– men aktiver altid `.venv` først**:  
   • Bash/Powershell → `source .venv/bin/activate`  
   • Windows CMD     → `.venv\Scripts\activate`
